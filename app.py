import gradio as gr
import time
from agents import run_medical_analysis
from cases import get_case_titles, get_case_description, get_bias_analysis

# Global variable to store current analysis results
current_results = None

def analyze_medical_case(case_input, custom_case_text=""):
    """
    Run the complete medical analysis using the three-agent system.
    
    Args:
        case_input (str): Selected case ID from dropdown
        custom_case_text (str): Custom case text input
        
    Returns:
        tuple: (case_display, agent1_output, agent2_output, agent3_output, bias_analysis)
    """
    global current_results
    
    # Determine which case to analyze
    if case_input == "custom" and custom_case_text.strip():
        case_text = custom_case_text.strip()
        case_display = f"**Custom Case:**\n\n{case_text}"
        bias_analysis = "Custom case - bias analysis will be generated by the agents"
    else:
        case_text = get_case_description(case_input)
        case_display = f"**{get_case_titles()[case_input]}**\n\n{case_text}"
        bias_info = get_bias_analysis(case_input)
        bias_analysis = f"**Expected Bias Types:** {bias_info['bias_type']}\n\n**Expected Bias Pattern:** {bias_info['expected_bias']}"
    
    # Run the three-agent analysis
    try:
        results = run_medical_analysis(case_text)
        current_results = results
        
        if results["status"] == "success":
            return (
                case_display,
                f"**Agent 1 (Diagnostician) - Initial Diagnosis:**\n\n{results['initial_diagnosis']}",
                f"**Agent 2 (Devil's Advocate) - Critical Analysis:**\n\n{results['critique']}",
                f"**Agent 3 (Synthesizer) - Final Diagnosis:**\n\n{results['final_diagnosis']}",
                bias_analysis
            )
        else:
            error_msg = f"Error in analysis: {results.get('error', 'Unknown error')}"
            return (
                case_display,
                f"**Error:** {error_msg}",
                f"**Error:** {error_msg}",
                f"**Error:** {error_msg}",
                bias_analysis
            )
            
    except Exception as e:
        error_msg = f"Unexpected error: {str(e)}"
        return (
            case_display,
            f"**Error:** {error_msg}",
            f"**Error:** {error_msg}",
            f"**Error:** {error_msg}",
            bias_analysis
        )

def clear_analysis():
    """Clear all analysis outputs."""
    global current_results
    current_results = None
    return "", "", "", "", ""

def get_learning_points():
    """Generate learning points based on the current analysis."""
    if not current_results or current_results.get("status") != "success":
        return "No analysis results available. Please run an analysis first."
    
    learning_points = """
## üéØ Key Learning Points from This Analysis

### 1. **Bias Identification**
- **Anchoring Bias**: Focusing on initial symptoms or first impressions
- **Confirmation Bias**: Seeking information that confirms initial diagnosis
- **Availability Bias**: Overweighting recent or memorable conditions

### 2. **Devil's Advocate Role**
- Challenges assumptions and initial conclusions
- Identifies overlooked symptoms or alternative explanations
- Questions the relevance of previous medical history

### 3. **Synthesis Process**
- Combines multiple perspectives for balanced assessment
- Addresses identified biases systematically
- Provides evidence-based final diagnosis

### 4. **Clinical Decision Making**
- Multiple perspectives reduce diagnostic errors
- Systematic bias detection improves accuracy
- Evidence-based synthesis leads to better outcomes

### 5. **Multi-Agent Benefits**
- **Agent 1**: Provides initial assessment (may be biased)
- **Agent 2**: Identifies and challenges biases
- **Agent 3**: Synthesizes for improved final diagnosis
"""
    return learning_points

# Create the Gradio interface
def create_interface():
    """Create and configure the Gradio interface."""
    
    with gr.Blocks(
        title="Devil's Advocate Multi-Agent Medical Analysis System",
        theme=gr.themes.Soft(),
        css="""
        .bias-highlight { 
            background-color: #fff3cd; 
            border-left: 4px solid #ffc107; 
            padding: 10px; 
            margin: 10px 0; 
        }
        .agent-output { 
            background-color: #f8f9fa; 
            border: 1px solid #dee2e6; 
            border-radius: 5px; 
            padding: 15px; 
            margin: 10px 0; 
        }
        .case-display { 
            background-color: #e3f2fd; 
            border: 1px solid #2196f3; 
            border-radius: 5px; 
            padding: 15px; 
            margin: 10px 0; 
        }
        """
    ) as interface:
        
        gr.Markdown("""
        # üè• Devil's Advocate Multi-Agent Medical Analysis System
        
        This demo shows how multiple AI agents can overcome diagnostic bias by simulating a clinical review process.
        
        ## How It Works:
        1. **Agent 1 (Diagnostician)**: Provides initial diagnosis (may be biased)
        2. **Agent 2 (Devil's Advocate)**: Critiques and identifies bias
        3. **Agent 3 (Synthesizer)**: Creates improved final diagnosis
        
        ## Instructions:
        - Select a sample case or input your own medical case
        - Click "Run Analysis" to see the three-agent process
        - Observe how bias is identified and addressed
        """)
        
        with gr.Row():
            with gr.Column(scale=1):
                gr.Markdown("### üìã Case Selection")
                
                # Case selection dropdown
                case_dropdown = gr.Dropdown(
                    choices=["Select a case..."] + list(get_case_titles().keys()),
                    label="Choose a Sample Case",
                    value="Select a case...",
                    interactive=True
                )
                
                # Custom case input
                custom_case = gr.Textbox(
                    label="Or Input Custom Medical Case",
                    placeholder="Describe the patient's symptoms, history, and examination findings...",
                    lines=8,
                    interactive=True
                )
                
                # Analysis button
                analyze_btn = gr.Button(
                    "üîç Run Analysis",
                    variant="primary",
                    size="lg"
                )
                
                # Clear button
                clear_btn = gr.Button(
                    "üóëÔ∏è Clear Analysis",
                    variant="secondary"
                )
                
                # Learning points button
                learning_btn = gr.Button(
                    "üìö Show Learning Points",
                    variant="secondary"
                )
            
            with gr.Column(scale=2):
                gr.Markdown("### üìä Analysis Results")
                
                # Case display
                case_display = gr.Markdown(
                    label="Case Information",
                    elem_classes=["case-display"]
                )
                
                # Agent outputs
                agent1_output = gr.Markdown(
                    label="Agent 1: Initial Diagnosis",
                    elem_classes=["agent-output"]
                )
                
                agent2_output = gr.Markdown(
                    label="Agent 2: Devil's Advocate Critique",
                    elem_classes=["agent-output"]
                )
                
                agent3_output = gr.Markdown(
                    label="Agent 3: Final Synthesis",
                    elem_classes=["agent-output"]
                )
                
                # Bias analysis
                bias_analysis = gr.Markdown(
                    label="Expected Bias Analysis",
                    elem_classes=["bias-highlight"]
                )
                
                # Learning points
                learning_points = gr.Markdown(
                    label="Learning Points",
                    visible=False
                )
        
        # Event handlers
        analyze_btn.click(
            fn=analyze_medical_case,
            inputs=[case_dropdown, custom_case],
            outputs=[case_display, agent1_output, agent2_output, agent3_output, bias_analysis]
        )
        
        clear_btn.click(
            fn=clear_analysis,
            outputs=[case_display, agent1_output, agent2_output, agent3_output, bias_analysis]
        )
        
        learning_btn.click(
            fn=get_learning_points,
            outputs=learning_points
        )
        
        # Show learning points when button is clicked
        learning_btn.click(
            fn=lambda: gr.update(visible=True),
            outputs=learning_points
        )
        
        # Auto-select custom case when custom text is entered
        def on_custom_text_change(text):
            if text.strip():
                return "custom"
            return case_dropdown.value
        
        custom_case.change(
            fn=on_custom_text_change,
            inputs=custom_case,
            outputs=case_dropdown
        )
        
        gr.Markdown("""
        ---
        **Note**: This is a demonstration system for educational purposes. 
        The AI agents simulate medical reasoning but should not be used for actual clinical decision-making.
        """)
    
    return interface

# Main execution
if __name__ == "__main__":
    # Create and launch the interface
    interface = create_interface()
    interface.launch(
        server_name="0.0.0.0",
        server_port=7860,
        share=False,
        show_error=True,
        quiet=False
    )
